/*
 * NetRexxScriptEngineFactory.nrx - NetRexx JSR223 Scripting Engine Factory
 *
  COPYRIGHT AND PERMISSION NOTICE

Copyright (C) 2009,2012 Kermit Kiser and others

All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, provided that the above copyright notice(s) and this permission notice appear in all copies of the Software and that both the above copyright notice(s) and this permission notice appear in supporting documentation.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Except as contained in this notice, the name of a copyright holder shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization of the copyright holder. 

 
Version 1.0.0 (November 26, 2012)

    * change package to org.netrexx.jsr223 for RexxLa release 

Version 0.0.1 (November 5, 2009)

    * First version working - simple feasibility demo! 
 
 */
package org.netrexx.jsr223
import javax.script.
import java.util.List
options strictcase
--trace results

class NetRexxScriptEngineFactory implements ScriptEngineFactory 
	
	properties private static
    
     FILEEXT = String ".nrx"
    
     MIMETYPES = [String "text/plain","text/NetRexx","application/NetRexx"] 
        
     NAMES = [String "NetRexx", "netrexx"] 
        
    myScriptEngine=ScriptEngine 
    extensions=List		--	<String> 
    mimeTypes=List		--	<String> 
    names=List			--	<String> 
    
    method NetRexxScriptEngineFactory() 
        if myScriptEngine = null then myScriptEngine = NetRexxScriptEngine()
        extensions = Collections.nCopies(1, FILEEXT)
        mimeTypes = Arrays.asList(MIMETYPES)
        names = Arrays.asList(NAMES)
    
    method getEngineName() returns String 
        return getScriptEngine().get(ScriptEngine.ENGINE).toString()
    
    method getEngineVersion() returns String  
        return getScriptEngine().get(ScriptEngine.ENGINE_VERSION).toString()
    
    method getExtensions() returns List			--		<String>
        return extensions
    
    method getMimeTypes() returns List			--		<String>
        return mimeTypes
    
    method getNames() returns List				--		<String>
        return names
    
    method getLanguageName() returns String
        return getScriptEngine().get(ScriptEngine.LANGUAGE).toString()
    
    method  getLanguageVersion() returns String
        return getScriptEngine().get(ScriptEngine.LANGUAGE_VERSION).toString()
    
    method getParameter(key=String ) returns  Object
        return getScriptEngine().get(key).toString()
    
--    method getMethodCallSyntax(obj=String ,m= String,  args= String...)  returns  String
    method getMethodCallSyntax(obj=String ,m= String,  args= String[])  returns  String
        sb = StringBuffer()
        sb.append(String (obj || "." || m || "("))
        len = args.length
        loop i=0 to len;i=i+1 
            if (i > 0) then -
                sb.append(',')
            sb.append(args[i])
            end
        sb.append(")")
        return sb.toString()
    
    method getOutputStatement(toDisplay=String ) returns String 
        return String ("say '" || toDisplay || "'")
    
--    method getProgram(statements=String ... ) returns  String
    method getProgram(statements=String[]) returns  String
        sb = StringBuffer()
        len = statements.length
        loop i=0 to len;i=i+1 
            if (i > 0) then -
                sb.append('\n')
            sb.append(statements[i])
            end
        return sb.toString()
    
    method getScriptEngine() returns ScriptEngine 
        return myScriptEngine
    
